<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio\2017\wdexpress\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="15.0">
 <Targets>
  <Target Name="C:\Users\223139002\Desktop\Stress-Analysis-Automation-1.0.0-beta (1)\Stress-Analysis-Automation-1.0.0-beta\MyCAD\bin\Release\MyCAD.exe">
   <Modules>
    <Module Name="mycad.exe">
     <Namespaces>
      <Namespace Name="MyCAD">
       <Types>
        <Type Name="MaterialsDBDataSet" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2024-08-14 15:36:37Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'MaterialsDBDataSet'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2024-08-14 15:36:37Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\223139002\Desktop\Stress-Analysis-Automation-1.0.0-beta (1)\Stress-Analysis-Automation-1.0.0-beta\MyCAD" File="MaterialsDBDataSet.Designer.cs" Line="29">'MaterialsDBDataSet.MaterialsDBDataSet()' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;MaterialsDBDataSet..ctor()&#xD;&#xA;DataSet.BeginInit():Void&#xD;&#xA;MaterialsDBDataSet.InitClass():Void&#xD;&#xA;DataSet.set_DataSetName(String):Void&#xD;&#xA;DataSet.set_Prefix(String):Void&#xD;&#xA;DataSet.set_Namespace(String):Void&#xD;&#xA;DataSet.set_EnforceConstraints(Boolean):Void&#xD;&#xA;DataSet.set_SchemaSerializationMode(SchemaSerializationMode):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CallBaseClassMethodsOnISerializableTypes" Category="Microsoft.Usage" CheckId="CA2236" Status="Active" Created="2024-08-14 15:36:37Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\223139002\Desktop\Stress-Analysis-Automation-1.0.0-beta (1)\Stress-Analysis-Automation-1.0.0-beta\MyCAD" File="MaterialsDBDataSet.Designer.cs" Line="29">Method 'MaterialsDBDataSet.MaterialsDBDataSet(SerializationInfo, StreamingContext)' should be modified to call its base class implementation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MaterialsDBDataSet+MaterialsDataTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2024-08-14 15:36:37Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'MaterialsDBDataSet.MaterialsDataTable'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2024-08-14 15:36:37Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\223139002\Desktop\Stress-Analysis-Automation-1.0.0-beta (1)\Stress-Analysis-Automation-1.0.0-beta\MyCAD" File="MaterialsDBDataSet.Designer.cs" Line="290">'MaterialsDBDataSet.MaterialsDataTable.MaterialsDataTable()' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;MaterialsDBDataSet+MaterialsDataTable..ctor()&#xD;&#xA;DataTable.set_TableName(String):Void&#xD;&#xA;DataTable.BeginInit():Void</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\223139002\Desktop\Stress-Analysis-Automation-1.0.0-beta (1)\Stress-Analysis-Automation-1.0.0-beta\MyCAD" File="MaterialsDBDataSet.Designer.cs" Line="290">'MaterialsDBDataSet.MaterialsDataTable.MaterialsDataTable()' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;MaterialsDBDataSet+MaterialsDataTable..ctor()&#xD;&#xA;DataTable.set_TableName(String):Void&#xD;&#xA;DataTable.BeginInit():Void&#xD;&#xA;MaterialsDBDataSet+MaterialsDataTable.InitClass():Void&#xD;&#xA;DataTable.get_Columns():DataColumnColl&#xD;&#xA;DataTable.EndInit():Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MyCAD.MaterialsDBDataSetTableAdapters">
       <Types>
        <Type Name="TableAdapterManager" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#UpdateAll(MyCAD.MaterialsDBDataSet)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2024-08-14 15:36:37Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\223139002\Desktop\Stress-Analysis-Automation-1.0.0-beta (1)\Stress-Analysis-Automation-1.0.0-beta\MyCAD" File="MaterialsDBDataSet.Designer.cs" Line="1259">Object 'workConnection' can be disposed more than once in method 'TableAdapterManager.UpdateAll(MaterialsDBDataSet)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 1259</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2024-08-14 15:36:37Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\223139002\Desktop\Stress-Analysis-Automation-1.0.0-beta (1)\Stress-Analysis-Automation-1.0.0-beta\MyCAD" File="MaterialsDBDataSet.Designer.cs" Line="1236">'TableAdapterManager.UpdateAll(MaterialsDBDataSet)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="CallBaseClassMethodsOnISerializableTypes" Category="Microsoft.Usage" CheckId="CA2236">
   <Name>Call base class methods on ISerializable types</Name>
   <Description>Derived ISerializable types must call the base class magic constructor and the base class GetObjectData method.</Description>
   <Resolution Name="Default">Method {0} should be modified to call its base class implementation.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182326.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202">
   <Name>Do not dispose objects multiple times</Name>
   <Description>A correctly implemented Dispose method can be called multiple times without throwing an exception. However, this is not guaranteed and to avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Description>
   <Resolution Name="Default">Object {0} can be disposed more than once in method {1}. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 1259</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182334.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214">
   <Name>Do not call overridable methods in constructors</Name>
   <Description>Virtual methods defined on the class should not be called from constructors. If a derived class has overridden the method, the derived class version will be called (before the derived class constructor is called).</Description>
   <Resolution Name="Default">{0} contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: {1}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182331.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="usagerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240">
   <Name>Implement ISerializable correctly</Name>
   <Description>If a type is assignable to ISerializable, it should implement GetObjectData. For unsealed types, the GetObjectData method should be callable and overridable by derived types.</Description>
   <Resolution Name="Default">Add an implementation of GetObjectData to type {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182342.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="60">Error</MessageLevel>
   <File Name="usagerules.dll" Version="15.0.0.0" />
  </Rule>
  <Rule TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200">
   <Name>Rethrow to preserve stack details</Name>
   <Description>Use the IL rethrow instruction to preserve original stack details when re-raising a caught exception.</Description>
   <Resolution Name="Default">{0} rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182363.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="15.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
